@include test-module('Mixins: CSS3') {

  @include test('ie-compatible-background-gradient') {

    @include assert('Should return a gradient with IE support for a horizontal gradient from left') {
      $start: #fff;
      $end: #000;
      $from: left;

      @include output {
        @include ie-compatible-background-gradient($start, $from, $start, $end);
      }

      @include expect {
        background-color: $start;
        @include filter-gradient($start, $end, horizontal);
        background-image: -ms-linear-gradient($from, $start, $end);
        @include background-image(linear-gradient($from, $start, $end));
      }
    }

    @include assert('Should return a gradient with IE support for a horizontal gradient from right') {
      $start: #fff;
      $end: #000;
      $from: right;

      @include output {
        @include ie-compatible-background-gradient($start, $from, $start, $end);
      }

      @include expect {
        background-color: $start;
        @include filter-gradient($end, $start, horizontal);
        background-image: -ms-linear-gradient($from, $start, $end);
        @include background-image(linear-gradient($from, $start, $end));
      }
    }

    @include assert('Should return a gradient with IE support for a vertical gradient from top') {
      $start: #fff;
      $end: #000;
      $from: top;

      @include output {
        @include ie-compatible-background-gradient($start, $from, $start, $end);
      }

      @include expect {
        background-color: $start;
        @include filter-gradient($end, $start, vertical);
        background-image: -ms-linear-gradient($from, $start, $end);
        @include background-image(linear-gradient($from, $start, $end));
      }
    }

    @include assert('Should return a gradient with IE support for a vertical gradient from bottom') {
      $start: #fff;
      $end: #000;
      $from: bottom;

      @include output {
        @include ie-compatible-background-gradient($start, $from, $start, $end);
      }

      @include expect {
        background-color: $start;
        @include filter-gradient($start, $end, vertical);
        background-image: -ms-linear-gradient($from, $start, $end);
        @include background-image(linear-gradient($from, $start, $end));
      }
    }
  }

  @include test('gradient-text') {

    @include assert('Should return gradient text styling') {
      $start: #fff;
      $end: #000;
      $from: left;

      @include output {
        @include gradient-text($start, $from, $start, $end);
      }

      @include expect {
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-image: -webkit-linear-gradient($from, $start, $end);
        color: $start;
      }
    }
  }

  @include test('placeholder') {

    @include assert('Should return cross-browser placeholder styling') {

      @include output {
        .test-input {
          @include placeholder {
            @include inline-block;
          }
        }
      }

      @include expect {
        .test-input {
          &.placeholder { @include inline-block; }

          &:-moz-placeholder { @include inline-block; }

          &::-moz-placeholder { @include inline-block; }

          &:-ms-input-placeholder { @include inline-block; }

          &::-webkit-input-placeholder { @include inline-block; }
        }
      }
    }
  }

  @include test('filter') {

    @include assert('Should return CSS filter') {
      $style: blur(5px);

      @include output {
        @include filter($style);
      }

      @include expect {
        -webkit-filter: $style;
        filter: $style;
      }
    }
  }

  @include test('animation') {

    @include assert('Should return a cross-browser animation') {
      $animation: fake-animation-name 3s;

      @include output {
        @include animation($animation);
      }

      @include expect {
        -moz-animation: $animation;
        -webkit-animation: $animation;
        animation: $animation;
      }
    }
  }

  @include test('keyframes') {

    @include assert('Should return cross-browser keyframes') {
      $name: fake-animation-name;

      @include output {
        @include keyframes($name) {
          0% {
            color: red;
          }
        }
      }

      @include expect {
        @-webkit-keyframes #{$name} {
          0% {
            color: red;
          }
        }

        @-moz-keyframes #{$name} {
          0% {
            color: red;
          }
        }

        @-o-keyframes #{$name} {
          0% {
            color: red;
          }
        }

        @keyframes #{$name} {
          0% {
            color: red;
          }
        }
      }
    }
  }

  @include test('ease-out-quint') {

    @include assert('Should return s cross-browser transition timing function') {

      @include output {
        @include ease-out-quint;
      }

      @include expect {
        @include transition-timing-function(cubic-bezier(0.230, 1.000, 0.320, 1.000)); // Ease out quint
      }
    }
  }
}
